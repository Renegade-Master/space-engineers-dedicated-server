# SteamCMD Dedicated Server Template Docker Image.
# Copyright (C) 2022-2022 Renegade-Master [renegade.master.dev@protonmail.com]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

name: Build and Test Server Image

#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

defaults:
  run:
    shell: bash

# Set some Environment Variables for image specific properties
env:
  IMAGE_NAMESPACE: renegademaster
  IMAGE_NAME: steamcmd-dedicated-server-template
  CONTAINER_NAME: dedicated-server
  INSTALL_DIR: REPLACE_ME_INSTALL
  CONFIG_DIR: REPLACE_ME_CONFIG

jobs:
  build-and-run:
    name: Build and Run Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [ docker, docker-compose, podman ]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set Variables
      id: variables
      run: |
        echo "::set-output name=datetime::$(date +%Y%m%dT%H%M%SZ)"

    - name: Set Permissions on Executable Scripts
      run: |
        chmod +x src/install_server.scmd
        chmod +x src/run_server.sh

    - name: Make Directories
      run: mkdir ${CONFIG_DIR} ${INSTALL_DIR}

    #######################
    # Docker Build System #
    #######################
    - name: Build the Docker Image
      if: ${{ success() && matrix.system == 'docker' }}
      run: |
        docker build \
        --file docker/${IMAGE_NAME}.Dockerfile \
        --tag docker.io/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${{ steps.variables.outputs.datetime }} \
        .

    - name: Test Run the Docker Image
      if: ${{ success() }}
      continue-on-error: true
      timeout-minutes: 5
      run: |
        # Start a timed shutdown signal
        (sleep 330 && docker exec \
          ${CONTAINER_NAME} bash -c \
            "rcon -a $(cat ${CONFIG_DIR}/ip.txt):\${RCON_PORT} -p \${RCON_PASSWORD} quit") &

        # Run the Docker Image
        docker run \
          --rm \
          --name ${CONTAINER_NAME} \
          --mount type=bind,source="$(pwd)/${INSTALL_DIR}",target=/home/steam/${INSTALL_DIR} \
          --mount type=bind,source="$(pwd)/${CONFIG_DIR}",target=/home/steam/${CONFIG_DIR} \
          --env=GAME_PORT="25496" \
          --env=MAX_PLAYERS="14" \
          --env=MAX_RAM="6144m" \
          --env=PUBLIC_SERVER="false" \
          --env=SERVER_NAME="GitHubActionTest" \
          --env=SERVER_PASSWORD="github_action_test_password" \
          docker.io/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${{ steps.variables.outputs.datetime }} \
        2>&1 | tee ./docker-log.log

    ###############################
    # Docker-Compose Build System #
    ###############################
    - name: Update Docker-Compose File
      if: ${{ success() && matrix.system == 'docker-compose' }}
      run: |
        sed -i "s/GAME_PORT=.*\"/GAME_PORT=25496\"/g" "./docker-compose.yaml"
        sed -i "s/MAX_PLAYERS=.*\"/MAX_PLAYERS=14\"/g" "./docker-compose.yaml"
        sed -i "s/MAX_RAM=.*m\"/MAX_RAM=6144m\"/g" "./docker-compose.yaml"
        sed -i "s/PUBLIC_SERVER=.*/PUBLIC_SERVER=false\"/g" "./docker-compose.yaml"
        sed -i "s/RCON_PASSWORD=.*/RCON_PASSWORD=github_action_test_rcon_password\"/g" "./docker-compose.yaml"
        sed -i "s/RCON_PORT=.*\"/RCON_PORT=27025\"/g" "./docker-compose.yaml"
        sed -i "s/SERVER_NAME=.*/SERVER_NAME=GitHubActionTest\"/g" "./docker-compose.yaml"
        sed -i "s/SERVER_PASSWORD=.*/SERVER_PASSWORD=github_action_test_password\"/g" "./docker-compose.yaml"

        cat docker-compose.yaml

    - name: Build the Docker-Compose Image
      if: ${{ success() && matrix.system == 'docker-compose' }}
      run: |
        docker-compose build

    - name: Test Run the Docker-Compose Image
      if: ${{ success() && matrix.system == 'docker-compose' }}
      continue-on-error: true
      timeout-minutes: 5
      run: |
        # Start a timed shutdown signal
        (sleep 330 && docker exec \
          ${IMAGE_NAME} bash -c \
            "rcon -a $(cat ${CONFIG_DIR}/ip.txt):\${RCON_PORT} -p \${RCON_PASSWORD} quit") &
        
        # Run the Docker-Compose Image
        docker-compose up \
          2>&1 | tee ./docker-log.log

    #######################
    # Podman Build System #
    #######################
    - name: Build the Podman Image
      if: ${{ success() && matrix.system == 'podman' }}
      run: |
        BUILDAH_LAYERS=true buildah bud \
        --file docker/${IMAGE_NAME}.Dockerfile \
        --tag docker.io/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${{ steps.variables.outputs.datetime }} \
        .

    - name: Test Run the Podman Image
      if: ${{ success() && matrix.system == 'podman' }}
      continue-on-error: true
      timeout-minutes: 7
      run: |
        # Start a timed shutdown signal
        (sleep 330 && podman exec \
          ${CONTAINER_NAME} bash -c \
            "rcon -a $(cat ${CONFIG_DIR}/ip.txt):\${RCON_PORT} -p \${RCON_PASSWORD} quit") &

        # Run the Podman Image
        podman run \
          --rm \
          --name ${CONTAINER_NAME} \
          --mount type=bind,source="$(pwd)/${INSTALL_DIR}",target=/home/steam/${INSTALL_DIR} \
          --mount type=bind,source="$(pwd)/${CONFIG_DIR}",target=/home/steam/${CONFIG_DIR} \
          --env=GAME_PORT="25496" \
          --env=MAX_PLAYERS="14" \
          --env=MAX_RAM="6144m" \
          --env=PUBLIC_SERVER="false" \
          --env=SERVER_NAME="GitHubActionTest" \
          --env=SERVER_PASSWORD="github_action_test_password" \
          docker.io/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${{ steps.variables.outputs.datetime }} \
        2>&1 | tee ./docker-log.log

    - name: Investigate File Structure on Failure
      if: ${{ failure() }}
      run: |
        pwd
        echo ''
        ls -lAuhFn ./${INSTALL_DIR}/
        echo ''
        ls -lAuhFn ./${CONFIG_DIR}/
        echo ''
        tree -aL 4 ./${INSTALL_DIR}/
        echo ''
        tree -aL 4 ./${CONFIG_DIR}/

    - name: Upload Docker Logs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: docker-logs
        path: |
          docker-log.log

    - name: Upload Server Configuration
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: server-configs
        path: |
          ${CONFIG_DIR}/Server/GitHubActionTest.ini
          ${CONFIG_DIR}/Server/GitHubActionTest_SandboxVars.lua
          ${INSTALL_DIR}/ProjectZomboid64.json

  test:
    name: Test Server
    runs-on: ubuntu-latest
    needs:
    - build-and-run
    steps:
    - name: Download Docker Logs
      uses: actions/download-artifact@v2
      with:
        name: docker-logs

    - name: Download Server Configs
      uses: actions/download-artifact@v2
      with:
        name: server-configs

    - name: Test - Server Started
      run: |
        check_for_config() {
          if ! grep -q -iE "$1" "./docker-log.log"; then
            printf "Could not find %s in %s\n" "$1" "./docker-log.log"
            exit 1
          else
            printf "Found %s in %s\n" "$1" "./docker-log.log"
          fi
        }
        
        check_for_config "LuaNet: Initialization \[DONE\]"

    - name: Test - Sed Command Completed
      run: |
        check_for_config() {
          if ! grep -q -iE "$1" "./docker-log.log"; then
            printf "Could not find %s in %s\n" "$1" "./docker-log.log"
          else
            printf "Found %s in %s\n" "$1" "./docker-log.log"
            exit 1
          fi
        }
        
        check_for_config "sed: can't read"

    - name: Test - Server JVM Configuration Applied
      run: |
        check_for_config() {
          if ! grep -q -iE "$1" "./${INSTALL_DIR}/ProjectZomboid64.json"; then
            printf "Could not find %s in %s\n" "$1" "./${INSTALL_DIR}/ProjectZomboid64.json"
            exit 1
          else
            printf "Found %s in %s\n" "$1" "./${INSTALL_DIR}/ProjectZomboid64.json"
          fi
        }
        
        check_for_config "\-Xmx6144m"

    - name: Test - Server Configuration Applied
      run: |
        check_for_config() {
          if ! grep -q -iE "$1" "./${CONFIG_DIR}/Server/GitHubActionTest.ini"; then
            printf "Could not find %s in %s\n" "$1" "./${CONFIG_DIR}/Server/GitHubActionTest.ini"
            exit 1
          else
            printf "Found %s in %s\n" "$1" "./${CONFIG_DIR}/Server/GitHubActionTest.ini"
          fi
        }

        check_for_config "SteamPort1=25496"
        check_for_config "MaxPlayers=14"
        check_for_config "Open=false"
        check_for_config "PublicName=GitHubActionTest"
        check_for_config "Password=github_action_test_password"
